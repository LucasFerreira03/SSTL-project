#include <Adafruit_LiquidCrystal.h> // Biblioteca para LCD I2C
#include <Servo.h>                  // Biblioteca para controle de servo motor
#include <WiFi.h>                   // Biblioteca para conexão Wi-Fi do ESP32
#include <WebServer.h>              // Biblioteca para servidor HTTP

Adafruit_LiquidCrystal lcd(0);      // Objeto para o display LCD
Servo servo;                        // Objeto para o servo motor

// Variáveis de sensores e controle
int baseTemp = 0;
int celcius = 0;
int baseph = 0;
int TRIG = 32; // Pino de trigger
int ECO = 33;  // Pino de echo
int DURACION;
int DISTANCIA;

// ====== CONFIGURAÇÃO DE REDE Wi-Fi ======
const char* ssid = "SEU_WIFI";
const char* password = "SUA_SENHA";
WebServer server(80); // Criação do servidor HTTP

void setup() {
  pinMode(34, INPUT); // pH
  pinMode(35, INPUT); // Temperatura
  pinMode(TRIG, OUTPUT);
  pinMode(ECO, INPUT);
  Serial.begin(9600);

  // LEDs e atuadores
  pinMode(2, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(18, OUTPUT);
  pinMode(19, OUTPUT);
  pinMode(21, OUTPUT);

  lcd.begin(16, 2);
  servo.attach(23); // Pino do servo no ESP32

  WiFi.begin(ssid, password);
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado. IP:");
  Serial.println(WiFi.localIP());

  server.on("/dados", []() {
    String json = "{\"temperatura\":" + String(celcius) +
                  ",\"ph\":" + String(baseph) +
                  ",\"nivel\":" + String(map(30 - DISTANCIA, 0, 30, 0, 100)) + "}";
    server.send(200, "application/json", json);
  });

  server.begin();
  Serial.println("Servidor HTTP iniciado.");
}

void loop() {
  server.handleClient();

  // === TEMPERATURA ===
  baseTemp = 40;
  celcius = map(((analogRead(35) - 20) * 3.04), 0, 4095, -40, 125);
  Serial.print("Temperatura: ");
  Serial.println(celcius);

  if (celcius < baseTemp) {
    digitalWrite(2, LOW);
    digitalWrite(4, LOW);
    servo.write(90);
  } else if (celcius > baseTemp + 20) {
    digitalWrite(2, HIGH);
    digitalWrite(4, HIGH);
    lcd.setCursor(1, 0);
    lcd.print("Perigo ");
    lcd.setCursor(1, 1);
    lcd.print("Temperatura");
    delay(2000);
    lcd.clear();
    servo.write(0);
  }

  // === PH ===
  baseph = 40;
  celcius = map(((analogRead(34) - 20) * 3.04), 0, 4095, -40, 125);
  Serial.print("PH: ");
  Serial.println(celcius);

  if (celcius < baseph) {
    digitalWrite(5, LOW);
    digitalWrite(18, LOW);
  } else if (celcius > baseph + 20) {
    digitalWrite(5, HIGH);
    digitalWrite(18, HIGH);
    lcd.setCursor(1, 0);
    lcd.print("Perigo ");
    lcd.setCursor(1, 1);
    lcd.print("PH");
    delay(2000);
    lcd.clear();
    servo.write(0);
  }

  // === NÍVEL ===
  digitalWrite(TRIG, HIGH);
  delay(10);
  digitalWrite(TRIG, LOW);
  DURACION = pulseIn(ECO, HIGH);
  DISTANCIA = DURACION / 58.2;
  Serial.print("Distância: ");
  Serial.println(DISTANCIA);
  delay(200);

  if (DISTANCIA < 50) {
    digitalWrite(19, HIGH);
    digitalWrite(21, HIGH);
    lcd.setCursor(1, 0);
    lcd.print("Aberto valvula ");
    lcd.setCursor(1, 1);
    lcd.print("de scape !!!");
    delay(2000);
    lcd.clear();
    servo.write(0);
    delay(1000);
  }

  delay(1000); // Delay entre leituras
}
